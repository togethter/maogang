//
//  AppDelegate.m
//  maoGang
//
//  Created by xl on 2018/11/13.
//  Copyright © 2018年 bilin. All rights reserved.
//

#import "AppDelegate.h"
#import "TBTabBarController.h"
#import "MyViewController.h"
#import "ProductionViewController.h"
#import "FontViewController.h"
#import <ShareSDK/ShareSDK.h>
#import "XLYuMengNotificationTool.h"
#import "YLUMpushVCTool.h"
#import "AdvertiseView.h"

//静态广告
#define ImgUrlString1 @"http://d.hiphotos.baidu.com/image/pic/item/14ce36d3d539b60071473204e150352ac75cb7f3.jpg"
//动态广告
#define ImgUrlString2 @"http://c.hiphotos.baidu.com/image/pic/item/d62a6059252dd42a6a943c180b3b5bb5c8eab8e7.jpg"



#define advertisingImage @"advertisingImage"
#define advertisingUrl [[NSUserDefaults standardUserDefaults] stringForKey:advertisingImage]  //存储的广告图片
@interface AppDelegate ()<UNUserNotificationCenterDelegate>
@property (nonatomic, assign) NSInteger Today;
@end

@implementation AppDelegate


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    // Override point for customization after application launch.
    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
    self.window.backgroundColor  = [UIColor whiteColor];
    TBTabBarController *tbBar = [[TBTabBarController alloc] init];
    self.window.rootViewController = tbBar;
    [self.window makeKeyAndVisible];
    
    [ShareSDK registPlatforms:^(SSDKRegister *platformsRegister) {
        //QQ
        [platformsRegister setupQQWithAppId:@"1107821357" appkey:@"4ZXutNM8ArPCaara"];
        //微信
        [platformsRegister setupWeChatWithAppId:@"wx32be02a6ca795ab3" appSecret:@"180092f1e39ed9e38ae23188d229f05b"];
    }];
    [XLYuMengNotificationTool XLYuMengNotificationToolwithappKey:XLYuMengNotificationToolAppKey withlaunchoptions:launchOptions withAppDelegate:self];
    [self showLunchTwo];
    return YES;
}

-(void)showLunchTwo{
    // 1.判断沙盒中是否存在广告图片，如果存在，直接显示
    NSString *filePath = [self getFilePathWithImageName:[kUserDefaults valueForKey:adImageName]];
    DLog(@"filePath==%@",filePath);
    BOOL isExist = [self isFileExistWithFilePath:filePath];
    
    if (isExist) {// 图片存在
        AdvertiseView *advertiseView = [[AdvertiseView alloc] initWithFrame:self.window.bounds];
        advertiseView.delegate = self;
        advertiseView.filePath = filePath;
        [advertiseView show];
    }
    // 2.无论沙盒中是否存在广告图片，都需要重新调用广告接口，判断广告是否更新
    [self NetworkRequestImages];
}



//ios10以下  接收推送  后台
-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler{
    
    [UMessage setAutoAlert:NO];
    if ([[[UIDevice currentDevice] systemVersion] integerValue]<10) {
        
        [UMessage didReceiveRemoteNotification:userInfo];
        if ([UIApplication sharedApplication].applicationState == UIApplicationStateBackground||[UIApplication sharedApplication].applicationState == UIApplicationStateInactive) {
            //后续操作
             [YLUMpushVCTool pushVCwithDic:userInfo];
            
            
        }
        
        
        
        
        
    }
    completionHandler(UIBackgroundFetchResultNewData);
    
}
//ios10以下  接收推送  前台
-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo{
    [UMessage setAutoAlert:NO];
    [UMessage didReceiveRemoteNotification:userInfo];
    
    
}

//ios10 新增  前台
-(void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler{
    
    //收到推送请求
    
    UNNotificationRequest * request = notification.request;
    
    //收到推送的内容
    UNNotificationContent * content = request.content;
    //收到用户的基本信息
    NSDictionary * userInfo = content.userInfo;
    if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {// 远程推送通知
        //应用处于前台时的远程推送接受
        //关闭U-Push自带的弹出框
        [UMessage setAutoAlert:NO];
        //必须加这句代码
        [UMessage didReceiveRemoteNotification:userInfo];
//        [YLUMpushVCTool pushVCwithDic:userInfo];
        
        
    }else{//本地推送通知
        //应用处于前台时的本地推送接受
    }
    //当应用处于前台时提示设置，需要哪个可以设置哪一个
    completionHandler(UNNotificationPresentationOptionSound|UNNotificationPresentationOptionBadge|UNNotificationPresentationOptionAlert);
    
}
//iOS10新增：处理后台点击通知的代理方法
//2.下面这个代理方法，只会是用户点击消息才会触发，如果使用户长按（3DTouch）、弹出Action页面等并不会触发。点击Action的时候会触发！
- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler {
    //收到推送的请求
    UNNotificationRequest *request = response.notification.request;
    
    //收到推送的内容
    UNNotificationContent *content = request.content;
    
    //收到用户的基本信息
    NSDictionary *userInfo = content.userInfo;
    
    //收到推送消息的角标
    NSNumber *badge = content.badge;
    
    //收到推送消息body
    NSString *body = content.body;
    
    //推送消息的声音
    UNNotificationSound *sound = content.sound;
    
    // 推送消息的副标题
    NSString *subtitle = content.subtitle;
    
    // 推送消息的标题
    NSString *title = content.title;
    
    NSString *actionIdentifierStr = response.actionIdentifier;// 操作的一些标识符

    if([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {// 这个是远程推送通知
        //应用处于后台时的远程推送接受
        //必须加这句代码
        [UMessage didReceiveRemoteNotification:userInfo];
#warning 拿到想要的数据去跳转到相应的页面
        // 拿到想要的数据去跳转到相应的页面
        // 用户点击推送的横幅做的一些操作
    
        [YLUMpushVCTool pushVCwithDic:userInfo];
        
        
        
    }else{// 本地推送通知
        //应用处于后台时的本地推送接受
    }
    completionHandler();
}

#pragma mark --- 获取deviceToken
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    NSString *jj = [self stringDevicetoken:deviceToken];
    NSLog(@"jj =%@", jj);
    //    [UMessage registerDeviceToken:deviceToken];
}
#pragma mark 以下的
-(NSString *)stringDevicetoken:(NSData *)deviceToken
{
    NSString *token = [deviceToken description];
    NSString *pushToken = [[[token stringByReplacingOccurrencesOfString:@"<"withString:@""] stringByReplacingOccurrencesOfString:@">"withString:@""] stringByReplacingOccurrencesOfString:@" "withString:@""];
    return pushToken;
}




- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
}


- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}


- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
}


- (void)applicationDidBecomeActive:(UIApplication *)application {
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}


- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}

#pragma mark --  AdvertiseViewDelegate
// 点击广告图片的回调事件图片的回调
- (void)AdvertiseViewpushAction
{
    
    NSString *url = UserDefaultObjectForKey(@"广告跳转");
    if (IS_VALID_STRING(url)) {
        //            WorshipTheJudgeNetworkViewController *vc = [[WorshipTheJudgeNetworkViewController alloc] init];
        //            vc.webType = WebForQiDongGuanGaoAction;
        //            vc.qidongGuangGao = url;
        //            [((UINavigationController *)(((UITabBarController *)self.window.rootViewController).viewControllers.firstObject)) pushViewController:vc animated:YES];
        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:url]];
    }
    
}
//获取今天周几
- (void)ForSeveralWeeksToday{
    
    
    NSDate *date = [NSDate date];
    NSCalendar *calendar = [NSCalendar currentCalendar];
    NSDateComponents *comps;
    comps = [calendar components:(NSWeekCalendarUnit | NSWeekdayCalendarUnit | NSWeekdayOrdinalCalendarUnit)
                        fromDate:date];
    _Today = [comps weekday]; // 星期几（注意，周日是“1”，周一是“2”。。。。）
    
    
    
    
}
//获取广告网络图片
- (void)NetworkRequestImages{
    [SVProgressHUD dismiss];
    
    [self ForSeveralWeeksToday];
    
    static NSString *dayKey = @"Today";
    NSInteger day = [[NSUserDefaults standardUserDefaults] integerForKey:dayKey];
    //    NSLog(@"%ld %ld",(long)day,(long)_Today);
    
    if (day != _Today) {
        
        [[YXHTTPRequst shareInstance]networking:SystemInitpic parameters:@{@"type" : @"ios"} method:YXRequstMethodTypePOST success:^(NSDictionary *obj) {
            
            if ([obj[@"status"]isEqualToString:@"200"]) {
                
                
                NSDictionary *dic = obj[@"info"][@"ios"][[self myIphone]];
                NSString *jump = dic[@"jump"];
                NSString *url  = dic[@"url"];
                // 获取图片名:43-130P5122Z60-50.jpg
                if (IS_VALID_STRING(url)) {
                    UserDefaultSetObjectForKey(url,@"广告页图片");
                }
                if (IS_VALID_STRING(jump)) {
                    UserDefaultSetObjectForKey(jump, @"广告跳转");
                }
                NSArray *stringArr = [url componentsSeparatedByString:@"/"];
                NSString *imageName = stringArr.lastObject;
                
                // 拼接沙盒路径
                NSString *filePath = [self getFilePathWithImageName:imageName];
                
                
                BOOL isExist = [self isFileExistWithFilePath:filePath];
                
                if (!isExist){// 如果该图片不存在，则删除老图片，下载新图片
                    
                    [self downloadAdImageWithUrl:url imageName:imageName];
                    
                }
                
                [[NSUserDefaults standardUserDefaults] setInteger:_Today forKey:@"Today"];
                [[NSUserDefaults standardUserDefaults] synchronize];
                
                if (!IS_VALID_STRING(url)) {
                    url = UserDefaultObjectForKey(@"广告页图片");
                    NSArray *stringArr = [url componentsSeparatedByString:@"/"];
                    NSString *imageName = stringArr.lastObject;
                    NSString *filePath = [self getFilePathWithImageName:imageName];
                    
                    BOOL isExist = [self isFileExistWithFilePath:filePath];
                    if (isExist){
                        NSFileManager *defauleManager = [NSFileManager defaultManager];
                        [defauleManager createDirectoryAtPath:filePath withIntermediateDirectories:YES attributes:nil error:nil];
                        [defauleManager removeItemAtPath:filePath error:nil];
                        
                    }
                    
                }
                
                
            }else{
                
            }
            
        } failsure:^(NSError *obj) {
            
            
        }];
        
        
        
        
    }
    
    
    
    
    
}

/**
 *  判断文件是否存在
 */
- (BOOL)isFileExistWithFilePath:(NSString *)filePath
{
    NSFileManager *fileManager = [NSFileManager defaultManager];
    BOOL isDirectory = FALSE;
    return [fileManager fileExistsAtPath:filePath isDirectory:&isDirectory];
}

/**
 *  下载新图片
 */
- (void)downloadAdImageWithUrl:(NSString *)imageUrl imageName:(NSString *)imageName
{
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:imageUrl]];
        UIImage *image = [UIImage imageWithData:data];
        
        NSString *filePath = [self getFilePathWithImageName:imageName]; // 保存文件的名称
        
        if ([UIImagePNGRepresentation(image) writeToFile:filePath atomically:YES]) {// 保存成功
            
            [self deleteOldImage];
            [kUserDefaults setValue:imageName forKey:adImageName];
            [kUserDefaults synchronize];
            // 如果有广告链接，将广告链接也保存下来
        }else{
            
        }
        
    });
    
    
}

/**
 *  删除旧图片
 */
- (void)deleteOldImage
{
    NSString *imageName = [kUserDefaults valueForKey:adImageName];
    
    if (imageName) {
        
        NSString *filePath = [self getFilePathWithImageName:imageName];
        NSFileManager *fileManager = [NSFileManager defaultManager];
        [fileManager removeItemAtPath:filePath error:nil];
        
    }
    
}

/**
 *  根据图片名拼接文件路径
 */
- (NSString *)getFilePathWithImageName:(NSString *)imageName
{
    if (imageName) {
        
        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES);
        NSString *filePath = [[paths objectAtIndex:0] stringByAppendingPathComponent:imageName];
        
        return filePath;
    }
    
    return nil;
}


- (NSString *)myIphone{
    
    if (iPhone4) {
        return @"iphone4";
    }else if (iPhone5){
        return @"iphone5";
    }else if (iPhone6){
        return @"iphone6";
    }else if (iPhone6P){
        return @"iphone6p";
    }else if(iPhoneX){
        return @"iphonex";
    }else if (iPhoneXM){
        return @"iphonexm";
    }else if (iPhoneXR){
        return @"iphonexr";
    }else{
        return @"iphone6";
    }
    
}


@end
