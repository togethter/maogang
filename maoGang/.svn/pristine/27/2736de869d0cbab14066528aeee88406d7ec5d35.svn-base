//
//  EditionController.m
//  maoGang
//
//  Created by xl on 2018/11/24.
//  Copyright © 2018年 bilin. All rights reserved.
//

#import "EditionController.h"
#import "MaogangDictionaryViewController.h"
#import "CustomAlertView.h"
#import "TypesettingViewController.h"// 排版
#import "EditionAddViewController.h"
@interface EditionController ()<EditionAddViewControllerDelegate>
{
    
}
@property (weak, nonatomic) IBOutlet UIView *yView;
@property (weak, nonatomic) IBOutlet UIView *contentView;
@property (nonatomic, strong) WKWebView *contentWKWebView;

@property (nonatomic, strong) UIButton *rightBtn;

@property (weak, nonatomic) IBOutlet UIView *bottomContentView;
@property (weak, nonatomic) IBOutlet NSLayoutConstraint *bottomMargin;

@property (nonatomic, strong) NSArray *fontTypeArray;
@property (weak, nonatomic) IBOutlet UILabel *ttpView;

@property (nonatomic) NSInteger fontTypeIndex;// 字体大小
@property (nonatomic, copy) NSString *text;// 网页文字

@property (nonatomic, strong) CustomAlertModel *customAlertModel;


@end


@implementation EditionController
- (NSArray *)fontTypeArray {
    if (!_fontTypeArray) {
        _fontTypeArray = [NSArray arrayWithObjects:@"SIMKAI",@"方正瘦金书GBK_宋徵宗瘦金体",@"报隶-简常规体",@"德彪钢笔行书字库",@"方正苏新诗柳楷简体",@"李旭科书法", nil];
    }
    return _fontTypeArray;
}

- (void)setFontTypeIndex:(NSInteger)xfontTypeIndex {
    if (!self.fontTypeArray.count) return;
    if (xfontTypeIndex < 0) {
        xfontTypeIndex = self.fontTypeArray.count?(self.fontTypeArray.count - 1):0;
    } else if (xfontTypeIndex > self.fontTypeArray.count - 1) {
        xfontTypeIndex = 0;
    }
    _fontTypeIndex = xfontTypeIndex;
    self.ttpView.text = self.fontTypeArray[xfontTypeIndex];
    NSString *fontType = [NSString stringWithFormat:@"fontType('%@')",self.fontTypeArray[xfontTypeIndex]];
    [self.wkWebView evaluateJavaScript:fontType completionHandler:^(id _Nullable result, NSError * _Nullable error) {
        DLog(@"%@ %@",result,error);
    }];
    
}
- (void)asynchronouslySetFontName:(NSString *)fontName finish:(void(^)(void))finshDownlodBlock error:(void(^)(void))errorBlock
{
    UIFont* aFont = [UIFont fontWithName:fontName size:12.];
    // If the font is already downloaded
    if (aFont && ([aFont.fontName compare:fontName] == NSOrderedSame || [aFont.familyName compare:fontName] == NSOrderedSame)) {
        // Go ahead and display the sample text.
//        NSUInteger sampleIndex = [_fontNames indexOfObject:fontName];
//        _fTextView.text = [_fontSamples objectAtIndex:sampleIndex];
//        _fTextView.font = [UIFont fontWithName:fontName size:24.];
        if (finshDownlodBlock) {
            finshDownlodBlock();
        }
        return;
    }
    
    // Create a dictionary with the font's PostScript name.
    NSMutableDictionary *attrs = [NSMutableDictionary dictionaryWithObjectsAndKeys:fontName, kCTFontNameAttribute, nil];
    
    // Create a new font descriptor reference from the attributes dictionary.
    CTFontDescriptorRef desc = CTFontDescriptorCreateWithAttributes((__bridge CFDictionaryRef)attrs);
    
    NSMutableArray *descs = [NSMutableArray arrayWithCapacity:0];
    [descs addObject:(__bridge id)desc];
    CFRelease(desc);
    
    __block BOOL errorDuringDownload = NO;
    
    // Start processing the font descriptor..
    // This function returns immediately, but can potentially take long time to process.
    // The progress is notified via the callback block of CTFontDescriptorProgressHandler type.
    // See CTFontDescriptor.h for the list of progress states and keys for progressParameter dictionary.
    CTFontDescriptorMatchFontDescriptorsWithProgressHandler( (__bridge CFArrayRef)descs, NULL,  ^(CTFontDescriptorMatchingState state, CFDictionaryRef progressParameter) {
        
        //NSLog( @"state %d - %@", state, progressParameter);
        
        double progressValue = [[(__bridge NSDictionary *)progressParameter objectForKey:(id)kCTFontDescriptorMatchingPercentage] doubleValue];
        
        if (state == kCTFontDescriptorMatchingDidBegin) {
            dispatch_async( dispatch_get_main_queue(), ^ {
                // Show an activity indicator
//                [_fActivityIndicatorView startAnimating];
//                _fActivityIndicatorView.hidden = NO;
//
//                // Show something in the text view to indicate that we are downloading
//                _fTextView.text= [NSString stringWithFormat:@"Downloading %@", fontName];
//                _fTextView.font = [UIFont systemFontOfSize:14.];
                
                NSLog(@"Begin Matching");
            });
        } else if (state == kCTFontDescriptorMatchingDidFinish) {
            dispatch_async( dispatch_get_main_queue(), ^ {
                // Remove the activity indicator
//                [_fActivityIndicatorView stopAnimating];
//                _fActivityIndicatorView.hidden = YES;
//
//                // Display the sample text for the newly downloaded font
//                NSUInteger sampleIndex = [_fontNames indexOfObject:fontName];
//                _fTextView.text = [_fontSamples objectAtIndex:sampleIndex];
//                _fTextView.font = [UIFont fontWithName:fontName size:24.];
                
                // Log the font URL in the console
                CTFontRef fontRef = CTFontCreateWithName((__bridge CFStringRef)fontName, 0., NULL);
                CFStringRef fontURL = CTFontCopyAttribute(fontRef, kCTFontURLAttribute);
                NSLog(@"%@", (__bridge NSURL*)(fontURL));
                CFRelease(fontURL);
                CFRelease(fontRef);
                
                if (!errorDuringDownload) {
                    NSLog(@"%@ downloaded", fontName);
                    if (finshDownlodBlock) {
                        finshDownlodBlock();
                    }
                }
            });
        } else if (state == kCTFontDescriptorMatchingWillBeginDownloading) {
            dispatch_async( dispatch_get_main_queue(), ^ {
                // Show a progress bar
//                _fProgressView.progress = 0.0;
//                _fProgressView.hidden = NO;
                NSLog(@"Begin Downloading");
            });
        } else if (state == kCTFontDescriptorMatchingDidFinishDownloading) {
            dispatch_async( dispatch_get_main_queue(), ^ {
                // Remove the progress bar
//                _fProgressView.hidden = YES;
                NSLog(@"Finish downloading");
            });
        } else if (state == kCTFontDescriptorMatchingDownloading) {// 进度
            dispatch_async( dispatch_get_main_queue(), ^ {
                // Use the progress bar to indicate the progress of the downloading
//                [_fProgressView setProgress:progressValue / 100.0 animated:YES];
                NSLog(@"Downloading %.0f%% complete", progressValue);
            });
        } else if (state == kCTFontDescriptorMatchingDidFailWithError) {// 出错
            // An error has occurred.
            // Get the error message
            NSString *_errorMessage = nil;
            NSError *error = [(__bridge NSDictionary *)progressParameter objectForKey:(id)kCTFontDescriptorMatchingError];
            if (error != nil) {
                _errorMessage = [error description];
            } else {
                _errorMessage = @"ERROR MESSAGE IS NOT AVAILABLE!";
            }
            // Set our flag
            errorDuringDownload = YES;
            
            dispatch_async( dispatch_get_main_queue(), ^ {
//                _fProgressView.hidden = YES;
                NSLog(@"Download error: %@", _errorMessage);
                if (errorBlock) {
                    errorBlock();
                }
            });
        }
        
        return (bool)YES;
    });
    
}
- (IBAction)previous:(UIButton *)sender {
    self.fontTypeIndex-=1;
}

- (IBAction)next:(UIButton *)sender {
    self.fontTypeIndex+=1;
}

- (void)dealloc {
    [self clearWebViewCache];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    self.yView.layer.cornerRadius = 3;
    self.yView.layer.masksToBounds = YES;
    __weak typeof(self)weakSelf = self;
    if (self.titleName) {
        self.navigationItem.title =  self.titleName;
    }
    self.rightBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [self.rightBtn setImage:[UIImage imageNamed:@"xiayibu_a"] forState:UIControlStateNormal];
    [self.rightBtn addTarget:self action:@selector(netAction:) forControlEvents:UIControlEventTouchUpInside];
    [self configureWkWebViewWithMinimunFontSize:0 target:self WithNameKey:nil configure:^(WKWebView *wkWebView) {
        [weakSelf.contentView addSubview:wkWebView];
        [weakSelf.wkWebView addSubview:weakSelf.rightBtn];
        [weakSelf.wkWebView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.mas_equalTo(weakSelf.contentView.mas_left);
            make.right.mas_equalTo(weakSelf.contentView.mas_right);
            make.top.mas_equalTo(weakSelf.contentView.mas_top);
            make.bottom.mas_equalTo(weakSelf.bottomContentView.mas_top);
        }];
        [weakSelf.rightBtn mas_makeConstraints:^(MASConstraintMaker *make) {
            make.right.mas_equalTo(weakSelf.wkWebView.mas_right).offset(-21);
            make.bottom.mas_equalTo(weakSelf.wkWebView.mas_bottom).offset(-40);
        }];
        iPhoneXR||iPhoneXM||iPhoneX?(weakSelf.bottomMargin.constant = 20):0;
    }];
    
    CustomAlertModel *customAlertModel = [CustomAlertModel new];
    customAlertModel.colorIndex = @(100);
    customAlertModel.tiziGeIndex = @(103);
    customAlertModel.percent = 0.6f;
    customAlertModel.sizeIndex = 1;
    customAlertModel.fontSizeIndex = 100;
    
    self.customAlertModel = customAlertModel;
    self.text = @"太阳出来就去耕作田地，太阳落山就回家去休息。凿一眼井就可以有水喝，种出庄稼就不会饿肚皮。这样的日子有何不自在，谁还去羡慕帝王的权力。由来称独立，本自号倾城。柳叶眉间发，桃花脸上生。腕摇金钏响，步转玉环鸣。纤腰宜宝袜，红衫艳织成。悬知一顾重，别觉舞腰轻。";
    UIBarButtonItem *rightBarbutton = [[UIBarButtonItem alloc] initWithImage:[[UIImage imageNamed:@"cidian"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] style:UIBarButtonItemStylePlain target:self action:@selector(rightItemAction:)];
    self.navigationItem.rightBarButtonItem = rightBarbutton;
    
   
    
}

- (void)rightItemAction:(UIBarButtonItem *)rightBarbutton {
    MaogangDictionaryViewController *vc = [[MaogangDictionaryViewController alloc] init];
    [self.navigationController pushViewController:vc animated:YES];
}

- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil titleName:(NSString *)titlename {
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        NSAssert(titlename, @"描述不能为空");
        self.titleName = titlename;
        self.navigationItem.title = titlename;
    }
    return self;
}

#pragma mark -  添加字帖的文字
- (void)editionAddViewControllerfinishWithTxt:(NSString *)txt {
    self.text = txt;
}

- (void)setText:(NSString *)text {
    if ([_text isEqualToString:text])return;
    _text = text;
    [self.wkWebView  loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@"http://192.168.0.192/zitie/step1.html?v=1"]]];
}

#pragma mark -  编辑文字
- (IBAction)bianji:(UIButton *)sender {
    EditionAddViewController *edadd = [[EditionAddViewController alloc] init];
    edadd.text = self.text;
    edadd.delegate = self;
    [self.navigationController pushViewController:edadd animated:YES];
}

#pragma mark -  纸张大小
- (void)netAction:(UIButton *)sender {
    __weak typeof(self)weakSelf = self;
    [[[CustomSize customSizeAlertPool].index(0) selectIndex:^(NSInteger index) {
        TypesettingViewController *vc = [[TypesettingViewController alloc] init];
        [weakSelf.navigationController pushViewController:vc animated:YES];
    }] alertShow];
    
}

#pragma mark -  设置字帖属性
- (IBAction)editionClick:(UIButton *)sender {
    __weak typeof(self)weakSelf = self;
    [[[[[[CustomAlertPool customAlertPool].tagNumber(sender.tag) alpha:^(CGFloat alpha) {
        weakSelf.customAlertModel.percent = alpha;
        NSString *xalpha = self.customAlertModel.alphaDic[[NSString stringWithFormat:@"%.2f",alpha]];
        NSString *alphaTXT = [NSString stringWithFormat:@"color('%@')",xalpha];
        [self.wkWebView evaluateJavaScript:alphaTXT completionHandler:^(id _Nullable result, NSError * _Nullable error) {
            
        }];
    }] color:^(NSNumber *colorIndex) {
        weakSelf.customAlertModel.colorIndex = colorIndex;
        NSInteger backgroundView = weakSelf.customAlertModel.tiziGeIndex.integerValue;// 田子
        NSString *backTXT = [NSString stringWithFormat:@"background('%@','%@')",[NSString stringWithFormat:@"%ld",backgroundView - 100] ,[NSString stringWithFormat:@"%@",weakSelf.customAlertModel.colorNameArray[colorIndex.integerValue-100]]];
        [weakSelf.wkWebView evaluateJavaScript:backTXT completionHandler:^(id _Nullable result, NSError * _Nullable error) {
            DLog(@"%@ %@",result,error);
        }];
        
    }] tiziGe:^(NSNumber *tiziIndex) {
        weakSelf.customAlertModel.tiziGeIndex = tiziIndex;
        NSInteger colorIndex = weakSelf.customAlertModel.colorIndex.integerValue;
        NSString *backTXT = [NSString stringWithFormat:@"background('%@','%@')",[NSString stringWithFormat:@"%ld",tiziIndex.integerValue - 100] ,self.customAlertModel.colorNameArray[colorIndex-100]];
        [weakSelf.wkWebView evaluateJavaScript:backTXT completionHandler:^(id _Nullable result, NSError * _Nullable error) {
            DLog(@"%@ %@",result,error);
        }];
        
    }] font:^(NSInteger font) {
        weakSelf.customAlertModel.fontSizeIndex = font;
        NSString *backTXT = [NSString stringWithFormat:@"fontSize('%@')",[NSString stringWithFormat:@"%ld",font - 100]];
        [weakSelf.wkWebView evaluateJavaScript:backTXT completionHandler:^(id _Nullable result, NSError * _Nullable error) {
            DLog(@"%@ %@",result,error);
        }];
//
        
        
    }].color(self.customAlertModel.colorIndex.integerValue).percent(self.customAlertModel.percent).tiziGe(self.customAlertModel.tiziGeIndex.integerValue).fontSize(self.customAlertModel.fontSizeIndex) alertShow];
}

- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation
{
    [self configureWebText:self.text];// 设置文字
    [self configureProerty:self.customAlertModel];
}

- (void)configureWebText:(NSString *)text {
    text = IS_VALID_STRING(text)?text:@"";
    NSString *jsTxt = [NSString stringWithFormat:@"text('%@')",text];
    __weak typeof(self)weakSelf = self;
    [self.wkWebView evaluateJavaScript:jsTxt completionHandler:^(id _Nullable result, NSError * _Nullable error) {
        weakSelf.fontTypeIndex = weakSelf.fontTypeIndex;;// 设置字体
        DLog(@"%@ %@",result,error);
    }];
}

- (void)configureProerty:(CustomAlertModel *)customAlertModel {
    NSInteger colorIndex = customAlertModel.colorIndex.integerValue -100;
    NSInteger backgroundView = customAlertModel.tiziGeIndex.intValue - 100;
    NSString *backTXT = [NSString stringWithFormat:@"background('%@','%@')",@(backgroundView),self.customAlertModel.colorNameArray[colorIndex]];
    [self.wkWebView evaluateJavaScript:backTXT completionHandler:^(id _Nullable result, NSError * _Nullable error) {
        DLog(@"%@ %@",result,error);
    }];
    NSInteger fontIndex =  customAlertModel.fontSizeIndex - 100;
    NSString *fonbackTXT = [NSString stringWithFormat:@"fontSize('%@')",[NSString stringWithFormat:@"%ld",fontIndex - 100]];
    [self.wkWebView evaluateJavaScript:fonbackTXT completionHandler:^(id _Nullable result, NSError * _Nullable error) {
        DLog(@"%@ %@",result,error);
    }];
    NSString *alpha = self.customAlertModel.alphaDic[[NSString stringWithFormat:@"%.2f",customAlertModel.percent]];
    NSString *alphaTXT = [NSString stringWithFormat:@"color('%@')",alpha];
    [self.wkWebView evaluateJavaScript:alphaTXT completionHandler:^(id _Nullable result, NSError * _Nullable error) {

    }];
//    [self.wkWebView evaluateJavaScript:nil completionHandler:^(id _Nullable result, NSError * _Nullable error) {
//
//    }];
//    [self.wkWebView evaluateJavaScript:nil completionHandler:^(id _Nullable, NSError * _Nullable error) {
//
//    }];
}

//AlpheraAlertView,TiziGeAlertView,FontAlertView,ColorAlertView

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
